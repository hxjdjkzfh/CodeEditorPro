name: Build Android App

# Add permissions needed for actions
permissions:
  contents: write
  packages: write

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-app:
    name: Build Android App
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: latest
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Create local.properties with SDK path
      run: echo "sdk.dir=$ANDROID_HOME" > local.properties
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    # Upload standard app artifact
    - name: Upload Standard Artifact
      uses: actions/upload-artifact@v4
      with:
        name: code-editor-standard-apk
        path: app/build/outputs/apk/debug/app-debug.apk
    
    # Send Standard APK to Telegram
    - name: Send Standard APK to Telegram
      if: success()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: "✅ Code Editor APK built successfully!"
        document: app/build/outputs/apk/debug/app-debug.apk
      
    # Create WebView app structure
    - name: Create WebView app structure
      run: |
        mkdir -p android-webview-app/app/src/main
        mkdir -p android-webview-app/app/src/main/java/com/example/codeeditor
        mkdir -p android-webview-app/app/src/main/res/layout
        mkdir -p android-webview-app/app/src/main/res/values
        mkdir -p android-webview-app/app/src/main/res/drawable
        mkdir -p android-webview-app/app/src/main/assets
        
        # Create icon for the app
        cat > android-webview-app/app/src/main/res/drawable/app_icon.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="108dp"
    android:height="108dp"
    android:viewportWidth="108"
    android:viewportHeight="108">
  <path
      android:fillColor="#007ACC"
      android:pathData="M54,108C83.82,108 108,83.82 108,54C108,24.18 83.82,0 54,0C24.18,0 0,24.18 0,54C0,83.82 24.18,108 54,108Z"/>
  <path
      android:fillColor="#FFFFFF"
      android:pathData="M32,32L76,32L76,76L32,76L32,32ZM38,38L38,70L70,70L70,38L38,38ZM44,50L52,50L52,64L44,64L44,50ZM58,44L66,44L66,58L58,58L58,44Z"/>
</vector>
EOF
        
        # Copying web app assets
        cp -r web-app/* android-webview-app/app/src/main/assets/
        
        # Creating basic Android files
        cat > android-webview-app/app/src/main/AndroidManifest.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.codeeditor">
    
    <application
        android:allowBackup="true"
        android:icon="@drawable/app_icon"
        android:label="@string/app_name"
        android:theme="@style/AppTheme">
        
        <activity 
            android:name=".MainActivity" 
            android:exported="true"
            android:configChanges="orientation|screenSize">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
EOF
        
        cat > android-webview-app/app/src/main/java/com/example/codeeditor/MainActivity.java << 'EOF'
package com.example.codeeditor;

import android.app.Activity;
import android.os.Bundle;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.view.Window;
import android.view.WindowManager;
import android.webkit.WebResourceRequest;
import android.webkit.WebResourceError;
import android.net.Uri;
import android.annotation.TargetApi;
import android.os.Build;
import android.widget.Toast;
import androidx.webkit.WebSettingsCompat;
import androidx.webkit.WebViewFeature;

public class MainActivity extends Activity {
    private WebView webView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        // Set fullscreen
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(
            WindowManager.LayoutParams.FLAG_FULLSCREEN,
            WindowManager.LayoutParams.FLAG_FULLSCREEN
        );
        
        setContentView(R.layout.activity_main);

        // Initialize WebView
        webView = findViewById(R.id.webview);
        WebSettings webSettings = webView.getSettings();
        
        // Enable JavaScript and DOM storage
        webSettings.setJavaScriptEnabled(true);
        webSettings.setDomStorageEnabled(true);
        
        // Modern caching mode
        webSettings.setCacheMode(WebSettings.LOAD_DEFAULT);
        
        // Enable modern web features if available
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            webSettings.setSafeBrowsingEnabled(true);
        }
        
        // Dark mode support if available
        if (WebViewFeature.isFeatureSupported(WebViewFeature.FORCE_DARK)) {
            WebSettingsCompat.setForceDark(webSettings, WebSettingsCompat.FORCE_DARK_ON);
        }
        
        // Enhanced webview client with error handling
        webView.setWebViewClient(new WebViewClient() {
            @Override
            public void onPageFinished(android.webkit.WebView view, String url) {
                super.onPageFinished(view, url);
                // Page loaded successfully
            }
            
            @Override
            @TargetApi(Build.VERSION_CODES.M)
            public void onReceivedError(android.webkit.WebView view, WebResourceRequest request, WebResourceError error) {
                super.onReceivedError(view, request, error);
                if (request.isForMainFrame()) {
                    // Handle main frame errors
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                        // Modern error reporting
                        String errorMessage = "Error: " + error.getDescription();
                        Toast.makeText(MainActivity.this, errorMessage, Toast.LENGTH_SHORT).show();
                    }
                }
            }
            
            @Override
            public boolean shouldOverrideUrlLoading(android.webkit.WebView view, WebResourceRequest request) {
                // Handle local file links internally
                Uri uri = request.getUrl();
                if (uri.getScheme().equals("file")) {
                    return false; // Let WebView handle local files
                }
                return super.shouldOverrideUrlLoading(view, request);
            }
        });
        
        // Chrome client for JavaScript dialogs and features
        webView.setWebChromeClient(new WebChromeClient());
        
        // Load the app
        webView.loadUrl("file:///android_asset/index.html");
    }

    @Override
    public void onBackPressed() {
        if (webView.canGoBack()) {
            webView.goBack();
        } else {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                this.getOnBackInvokedDispatcher().registerOnBackInvokedCallback(0, () -> {
                    finish();
                });
            } else {
                super.onBackPressed();
            }
        }
    }
    
    @Override
    protected void onPause() {
        super.onPause();
        webView.onPause();
    }
    
    @Override
    protected void onResume() {
        super.onResume();
        webView.onResume();
    }
    
    @Override
    protected void onDestroy() {
        webView.destroy();
        super.onDestroy();
    }
}
EOF
        
        cat > android-webview-app/app/src/main/res/layout/activity_main.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#1e1e1e">
    
    <WebView
        android:id="@+id/webview"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
    
</RelativeLayout>
EOF
        
        cat > android-webview-app/app/src/main/res/values/strings.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">Code Editor</string>
</resources>
EOF

        cat > android-webview-app/app/src/main/res/values/styles.xml << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <style name="AppTheme" parent="android:Theme.Material.NoActionBar">
        <item name="android:colorPrimary">#007ACC</item>
        <item name="android:colorPrimaryDark">#005A9C</item>
        <item name="android:colorAccent">#FF4081</item>
        <item name="android:windowBackground">#1e1e1e</item>
    </style>
</resources>
EOF
        
        # Creating build files
        cat > android-webview-app/app/build.gradle << 'EOF'
plugins {
    id 'com.android.application'
}

android {
    namespace "com.example.codeeditor"
    compileSdk 34
    
    defaultConfig {
        applicationId "com.example.codeeditor"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }
    
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    buildFeatures {
        viewBinding true
    }
    
    // Fix for duplicate files during build
    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE', 'META-INF/LICENSE.txt', 'META-INF/NOTICE', 'META-INF/NOTICE.txt']
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.webkit:webkit:1.8.0'
}
EOF
        
        cat > android-webview-app/build.gradle << 'EOF'
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.3.0'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
EOF
        
        cat > android-webview-app/settings.gradle << 'EOF'
pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.name = "CodeEditor"
include ':app'
EOF
        
        cat > android-webview-app/gradle.properties << 'EOF'
# Project-wide Gradle settings
org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
# AndroidX settings
android.useAndroidX=true
android.enableJetifier=true
# Gradle settings
org.gradle.parallel=true
org.gradle.caching=true
org.gradle.daemon=true
EOF
        
        # Create Gradle wrapper directory
        mkdir -p android-webview-app/gradle/wrapper
        
        # Download latest Gradle wrapper JAR file
        curl -L -o android-webview-app/gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/master/gradle/wrapper/gradle-wrapper.jar
        
        # Create gradle-wrapper.properties file with latest Gradle version
        cat > android-webview-app/gradle/wrapper/gradle-wrapper.properties << 'EOF'
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-all.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
EOF
        
        chmod +x android-webview-app/gradlew
        
    - name: Build WebView App
      run: |
        cd android-webview-app
        echo "sdk.dir=$ANDROID_HOME" > local.properties
        ./gradlew assembleDebug
      
# Убрана сборка минимального APK в пользу полной сборки Gradle
      
    # Upload WebView app artifact
    - name: Upload WebView Artifact
      uses: actions/upload-artifact@v4
      with:
        name: code-editor-webview-apk
        path: android-webview-app/app/build/outputs/apk/debug/app-debug.apk
    
    # Send WebView APK to Telegram
    - name: Send WebView APK to Telegram
      if: success()
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: "✅ Code Editor WebView APK built successfully!"
        document: android-webview-app/app/build/outputs/apk/debug/app-debug.apk